package com.sidbi.refinance.appr.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Objects;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.sidbi.refinance.appr.dto.DocDTO;
import com.sidbi.refinance.appr.service.ApprAnnexureService;
import com.sidbi.refinance.common.model.resmodel.ResponseWithObject;
import com.sidbi.refinance.common.util.AppConstants;
import com.sidbi.refinance.online.dto.FetchDoc;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/appr")
@Tag(name = "Appraisal>Annexure>VII,VIII,IX", description = "[LOS]-Compliance Checks for SIDBI")
public class ApprAnnexureController {

	private final ApprAnnexureService annexureService;

	public ApprAnnexureController(ApprAnnexureService annexureService) {
		super();
		this.annexureService = annexureService;
	}

	@PostMapping("/saveComplianceDoc")
	@Operation(summary = "Save  Compliance checks for SIDBI in the appraisal", description = "by passing the applId it is saving")
	public ResponseEntity<Object> saveERRDoc(@RequestPart DocDTO docDTO, @RequestPart MultipartFile doc) {
		docDTO = annexureService.saveERRDoc(docDTO, doc);
		if (docDTO.getSaveStatus().equalsIgnoreCase(AppConstants.ERROR)) {
			return new ResponseWithObject().generateResponse(AppConstants.ERROR, HttpStatus.INTERNAL_SERVER_ERROR,
					null);
		} else {
			return new ResponseWithObject().generateResponse(AppConstants.SUCCESS, HttpStatus.OK, docDTO);

		}
	}

	@Operation(description = "api to download Compliance document", summary = "api to view the file and downaload it in annuxure section", tags = "Download")
	@PostMapping("/getComplianceDown")
	public ResponseEntity<byte[]> getComplianceDownload(@RequestBody FetchDoc path) throws IOException {
		var compFile = Paths.get(path.getFileUrl());
		var fileContentType = "";
		byte[] data = null;
		if (Files.exists(compFile)) {
			data = Files.readAllBytes(compFile);
			fileContentType = Files.probeContentType(compFile);
		}
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, AppConstants.ATTACHMENT + compFile.getFileName() + "\"")
				.header(HttpHeaders.CONTENT_TYPE, fileContentType).body(data);

	}

	@Operation(description = "api to get the  Compliance document", summary = "api to only view  the file in annuxre section", tags = "Download")
	@GetMapping("/getComplianceDoc")
	public ResponseEntity<Object> getComplianceDoc(String applId, String section) {

		var appraisalSectionDocumentsDTO = annexureService.getComplianceDoc(applId, section);

		if (!Objects.isNull(appraisalSectionDocumentsDTO)) {
			return new ResponseWithObject().generateResponse(AppConstants.SUCCESS, HttpStatus.OK,
					appraisalSectionDocumentsDTO);
		} else {
			return new ResponseWithObject().generateResponse(AppConstants.NO_DATA_FOUND, HttpStatus.NOT_FOUND,
					appraisalSectionDocumentsDTO);
		}

	}

}
